/*
  This file is automatically generated. Any changes will be overwritten.
  Modify edit-base.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownDataGridComponent } from '@radzen/angular/dist/dropdown-datagrid';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';

import { DbSinDarElaService } from '../db-sin-dar-ela.service';
import { SecurityService } from '../security.service';

export class EditBaseGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('anredeIdLabel') anredeIdLabel: LabelComponent;
  @ViewChild('anredeId') anredeId: DropDownDataGridComponent;
  @ViewChild('name1Label') name1Label: LabelComponent;
  @ViewChild('name1') name1: TextBoxComponent;
  @ViewChild('name1RequiredValidator') name1RequiredValidator: RequiredValidatorComponent;
  @ViewChild('name2Label') name2Label: LabelComponent;
  @ViewChild('name2') name2: TextBoxComponent;
  @ViewChild('nameKuerzelLabel') nameKuerzelLabel: LabelComponent;
  @ViewChild('nameKuerzel') nameKuerzel: TextBoxComponent;
  @ViewChild('titelVorneLabel') titelVorneLabel: LabelComponent;
  @ViewChild('titelVorne') titelVorne: TextBoxComponent;
  @ViewChild('titelHintenLabel') titelHintenLabel: LabelComponent;
  @ViewChild('titelHinten') titelHinten: TextBoxComponent;
  @ViewChild('strasseLabel') strasseLabel: LabelComponent;
  @ViewChild('strasse') strasse: TextBoxComponent;
  @ViewChild('plzLabel') plzLabel: LabelComponent;
  @ViewChild('plz') plz: TextBoxComponent;
  @ViewChild('ortLabel') ortLabel: LabelComponent;
  @ViewChild('ort') ort: TextBoxComponent;
  @ViewChild('geburtsdatumLabel') geburtsdatumLabel: LabelComponent;
  @ViewChild('geburtsdatum') geburtsdatum: DatePickerComponent;
  @ViewChild('versicherungsnummerLabel') versicherungsnummerLabel: LabelComponent;
  @ViewChild('versicherungsnummer') versicherungsnummer: TextBoxComponent;
  @ViewChild('staatsangehoerigkeitLabel') staatsangehoerigkeitLabel: LabelComponent;
  @ViewChild('staatsangehoerigkeit') staatsangehoerigkeit: TextBoxComponent;
  @ViewChild('telefon1Label') telefon1Label: LabelComponent;
  @ViewChild('telefon1') telefon1: TextBoxComponent;
  @ViewChild('telefon2Label') telefon2Label: LabelComponent;
  @ViewChild('telefon2') telefon2: TextBoxComponent;
  @ViewChild('eMail1Label') eMail1Label: LabelComponent;
  @ViewChild('eMail1') eMail1: TextBoxComponent;
  @ViewChild('eMail2Label') eMail2Label: LabelComponent;
  @ViewChild('eMail2') eMail2: TextBoxComponent;
  @ViewChild('webseiteLabel') webseiteLabel: LabelComponent;
  @ViewChild('webseite') webseite: TextBoxComponent;
  @ViewChild('bildUrlLabel') bildUrlLabel: LabelComponent;
  @ViewChild('bildUrl') bildUrl: TextBoxComponent;
  @ViewChild('notizLabel') notizLabel: LabelComponent;
  @ViewChild('notiz') notiz: TextBoxComponent;
  @ViewChild('kontoNameLabel') kontoNameLabel: LabelComponent;
  @ViewChild('kontoName') kontoName: TextBoxComponent;
  @ViewChild('kontoNummerLabel') kontoNummerLabel: LabelComponent;
  @ViewChild('kontoNummer') kontoNummer: TextBoxComponent;
  @ViewChild('kontoInfoLabel') kontoInfoLabel: LabelComponent;
  @ViewChild('kontoInfo') kontoInfo: TextBoxComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbSinDarEla: DbSinDarElaService;

  security: SecurityService;
  base: any;
  getByBaseAnredensForAnredeIDResult: any;
  getBaseAnredensForAnredeIDPageSize: any;
  getBaseAnredensForAnredeIDResult: any;
  getBaseAnredensForAnredeIDCount: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbSinDarEla = this.injector.get(DbSinDarElaService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbSinDarEla.getBaseByBaseId(null, this.parameters.BaseID)
    .subscribe((result: any) => {
      this.base = result;

      if (this.base.AnredeID != null) {
              this.dbSinDarEla.getBaseAnredenByAnredeId(null, this.base.AnredeID)
        .subscribe((result: any) => {
              this.getByBaseAnredensForAnredeIDResult = result;
        }, (result: any) => {
      
        });
      }
    }, (result: any) => {

    });

    this.getBaseAnredensForAnredeIDPageSize = 10;

    this.dbSinDarEla.getBaseAnredens(null, this.getBaseAnredensForAnredeIDPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getBaseAnredensForAnredeIDResult = result.value;

      this.getBaseAnredensForAnredeIDCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.dbSinDarEla.updateBase(null, this.parameters.BaseID, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update Base` });
    });
  }

  AnredeIDLoadData(event: any) {
    this.dbSinDarEla.getBaseAnredens(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.getBaseAnredensForAnredeIDResult = result.value;

      this.getBaseAnredensForAnredeIDCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  button2Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
