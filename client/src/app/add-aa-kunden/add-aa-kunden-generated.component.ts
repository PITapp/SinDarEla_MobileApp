/*
  This file is automatically generated. Any changes will be overwritten.
  Modify add-aa-kunden.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { ConfigService } from '../config.service';

import { DbSinDarElaService } from '../db-sin-dar-ela.service';
import { SecurityService } from '../security.service';

export class AddAaKundenGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('baseIdLabel') baseIdLabel: LabelComponent;
  @ViewChild('baseId') baseId: DropDownComponent;
  @ViewChild('baseIdRequiredValidator') baseIdRequiredValidator: RequiredValidatorComponent;
  @ViewChild('kundenStatusIdLabel') kundenStatusIdLabel: LabelComponent;
  @ViewChild('kundenStatusId') kundenStatusId: DropDownComponent;
  @ViewChild('kundenStatusIdRequiredValidator') kundenStatusIdRequiredValidator: RequiredValidatorComponent;
  @ViewChild('betreuungsbeginnLabel') betreuungsbeginnLabel: LabelComponent;
  @ViewChild('betreuungsbeginn') betreuungsbeginn: DatePickerComponent;
  @ViewChild('betreuungsbeginnRequiredValidator') betreuungsbeginnRequiredValidator: RequiredValidatorComponent;
  @ViewChild('vorbemerkungenLabel') vorbemerkungenLabel: LabelComponent;
  @ViewChild('vorbemerkungen') vorbemerkungen: TextBoxComponent;
  @ViewChild('infoLabel') infoLabel: LabelComponent;
  @ViewChild('info') info: TextBoxComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  dbSinDarEla: DbSinDarElaService;

  security: SecurityService;
  getBasesResult: any;
  getKundenStatusesResult: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.dbSinDarEla = this.injector.get(DbSinDarElaService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.dbSinDarEla.getBases(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getBasesResult = result.value;
    }, (result: any) => {

    });

    this.dbSinDarEla.getKundenStatuses(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getKundenStatusesResult = result.value;
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.dbSinDarEla.createKunden(null, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new Kunden!` });
    });
  }

  button2Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
